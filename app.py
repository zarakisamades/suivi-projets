import streamlit as st
from supabase import create_client, Client
import socket
import httpx

st.set_page_config(page_title="Suivi d‚Äôavancement ‚Äî Saisie hebdomadaire", page_icon="üìä")

# Lecture des secrets Streamlit
SUPABASE_URL = st.secrets["SUPABASE_URL"]
SUPABASE_ANON_KEY = st.secrets["SUPABASE_ANON_KEY"]

# --- V√©rification DNS ---
st.title("üß≠ Test DNS Supabase")

try:
    host = SUPABASE_URL.replace("https://", "").replace("http://", "").split("/")[0]
    socket.gethostbyname(host)
    st.success(f"‚úÖ DNS OK : {host}")
except Exception as e:
    st.error(f"‚ùå DNS √©chec : {e}")

# --- V√©rification r√©seau ---
try:
    r = httpx.get(SUPABASE_URL + "/rest/v1", timeout=5)
    if r.status_code == 401:
        st.success("‚úÖ Connexion r√©seau Supabase OK (status: 401)")
    else:
        st.warning(f"‚ö†Ô∏è Connexion r√©seau possible, code: {r.status_code}")
except Exception as e:
    st.error(f"‚ùå Erreur r√©seau vers Supabase : {e}")

# --- Initialisation Supabase ---
try:
    sb: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
    st.success("‚úÖ Import et initialisation de Supabase OK")
except Exception as e:
    st.error(f"‚ùå Erreur cr√©ation client Supabase : {e}")

# --- Interface principale ---
st.header("üìà Suivi d‚Äôavancement ‚Äî Saisie hebdomadaire")
menu = st.sidebar.radio("Connexion", ["Se connecter", "Cr√©er un compte"])

email = st.text_input("Email", "")
password = st.text_input("Mot de passe (min 6 caract√®res)", type="password")

if menu == "Cr√©er un compte":
    if st.button("Cr√©er mon compte"):
        try:
            res = sb.auth.sign_up({"email": email, "password": password})
            if res.user:
                st.success("‚úÖ Compte cr√©√© avec succ√®s !")
            else:
                st.warning("‚ö†Ô∏è √âchec cr√©ation du compte : cl√© ou configuration invalide.")
        except Exception as e:
            st.error(f"‚ùå Erreur de cr√©ation du compte : {e}")

elif menu == "Se connecter":
    if st.button("Connexion"):
        try:
            res = sb.auth.sign_in_with_password({"email": email, "password": password})
            if res.user:
                st.success(f"‚úÖ Connect√© en tant que {email}")
            else:
                st.warning("‚ö†Ô∏è √âchec de connexion (v√©rifie tes identifiants).")
        except Exception as e:
            st.error(f"‚ùå Erreur de connexion : {e}")
